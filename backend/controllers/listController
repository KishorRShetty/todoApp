const listModel = require("../models/todoModel");

exports.addlist = async (req, res) => {
    console.log(req.body);
  try {
    const list = await listModel.create(req.body);
    res.status(201).json({
      success: true,
      list,
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message.includes("E11000")
        ? "Duplicate Title"
        : error.message,
      //   message: error.message
    });
  }
};

exports.readAlllist = async (req, res) => {
  try {
    const list = await listModel.find({});
    res.status(200).json({
      success: true,
      list,
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message,
    });
  }
};
exports.readOnelist = async (req, res) => {
  try {
    const oneItem = await listModel.findById(req.params.id);

    if (!oneItem) {
      res.status(400).json({
        success: false,
        message: "Id not found",
      });
    } else {
      res.status(200).json({
        success: true,
        oneItem,
      });
    }
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message,
    });
  }
};
exports.updateOne = async (req, res) => {
  try {
    let isList = await listModel.findById(req.params.id);
    if (!isList) {
      res.status(400).json({
        success: false,
        message: "Id not found",
      });
    } else {
      isList = await listModel.findByIdAndUpdate(req.params.id, req.body, {
        new: true,
      });
      res.status(200).json({
        success: true,
        isList,
      });
    }
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message,
    });
  }
};
exports.deleteOne = async (req, res) => {
  try {
    const isList = await listModel.findByIdAndDelete(req.params.id);
    if (!isList) {
      res.status(400).json({
        success: false,
        message: "Id not found",
      });
    } else {
      res.status(200).json({
        success: true,
      });
    }
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message,
    });
  }
};
